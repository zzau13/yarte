//! Right now a Yarte configuration file can have the following:
//!
//! - **`main`** (general configuration - optional): with attribute
//!   - **`dir`**: name of template directory. If no value is given, a default directory
//! **`templates`** will be used. If the defined directory is not found, an error
//! will prompt.
//!   - **`debug`**: type of output of debug mode. The code and/or  ast generated by  Yarte
//! can be visualize, to do so, at most one of three possible values has to be given:
//! `code`, `ast`, or `all`.
//!
//! - **`partials`** (partials aliasing - optional): each entry must be of the type
//! `name_alias = "./alias/path/"`, where `./` makes reference to `dir` value. Path
//! must exist, or error will be prompt. If the tag `partials` doesn't exist no aliasing
//! will be possible.
//!
//! ### Example of a config file
//! ```toml
//! [main]
//! dir = "templates"
//! debug = "all"
//!
//! [partials]
//! alias = "./deep/more/deep"
//! ```
//!
//! With this configuration, the user can call `alias` in a partial instance with
//! `{{> alias context}}` or `{{> alias}}` if the current context is well defined.
//!
use std::{
    collections::BTreeMap,
    env, fs,
    path::{Path, PathBuf},
    rc::Rc,
};

use serde::Deserialize;

#[derive(Debug)]
pub struct Dir(PathBuf);

impl Dir {
    pub fn get_template(&self, path: Rc<Path>) -> Rc<Path> {
        let template = self.0.join(path);

        if template.exists() {
            template.into()
        } else {
            // TODO: error
            panic!("template not found in directory {template:?}")
        }
    }
}

impl From<Option<String>> for Dir {
    fn from(p: Option<String>) -> Self {
        let root = PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap());
        Dir(p.map_or_else(|| root.join(DEFAULT_DIR), |v| root.join(v)))
    }
}

#[derive(Debug, PartialEq, Eq)]
pub enum PrintConfig {
    All,
    Ast,
    Code,
    None,
}

impl From<Option<String>> for PrintConfig {
    fn from(s: Option<String>) -> Self {
        match s.as_deref() {
            Some("all") => PrintConfig::All,
            Some("ast") => PrintConfig::Ast,
            Some("code") => PrintConfig::Code,
            _ => PrintConfig::None,
        }
    }
}

#[derive(Debug)]
pub struct Config {
    dir: Dir,
    alias: BTreeMap<String, String>,
    pub print_override: PrintConfig,
    pub debug: PrintOption,
}

impl Config {
    pub fn new(s: &str) -> Config {
        let raw: RawConfig =
            toml::from_str(s).unwrap_or_else(|_| panic!("invalid TOML in {CONFIG_FILE_NAME}"));
        let (dir, print) = raw.main.map(|x| (x.dir, x.debug)).unwrap_or((None, None));

        Config {
            dir: Dir::from(dir),
            print_override: PrintConfig::from(print),
            debug: raw.debug.unwrap_or_default(),
            alias: raw.partials.unwrap_or_default(),
        }
    }

    pub fn get_dir(&self) -> &PathBuf {
        &self.dir.0
    }

    pub fn get_template(&self, path: Rc<Path>) -> (Rc<Path>, String) {
        let path = self.dir.get_template(Rc::clone(&path));
        let src = get_source(Rc::clone(&path));
        (path, src)
    }

    pub fn resolve_partial<P: AsRef<Path>>(&self, parent: P, ident: &str) -> Rc<Path> {
        let (mut buf, is_alias) = self
            .alias
            .iter()
            .find_map(|(k, v)| {
                if let Some(stripped) = ident.strip_prefix(k) {
                    let mut path = (*v).to_string();
                    path.push_str(stripped);
                    // TODO
                    Some(PathBuf::from(path))
                } else {
                    None
                }
            })
            .map_or((PathBuf::from(ident), false), |s| (s, true));

        if buf.extension().is_none() {
            if let Some(ext) = parent.as_ref().extension() {
                buf = buf.with_extension(ext);
            }
        };

        if is_alias {
            normalize(self.dir.get_template(buf.into()))
        } else {
            let mut parent = parent.as_ref().to_owned();
            parent.pop();
            parent.push(buf);
            normalize(parent.into())
        }
    }
}

#[cfg(not(target_os = "windows"))]
fn normalize(p: Rc<Path>) -> Rc<Path> {
    // TODO: error
    p.canonicalize().expect("Correct template path").into()
}

#[cfg(target_os = "windows")]
fn normalize(p: Rc<Path>) -> Rc<Path> {
    // TODO check canonicalize in windows
    p
}

#[derive(Deserialize)]
struct RawConfig {
    main: Option<Main>,
    debug: Option<PrintOption>,
    partials: Option<BTreeMap<String, String>>,
}

#[derive(Deserialize)]
struct Main {
    dir: Option<String>,
    debug: Option<String>,
}

#[derive(Debug, Deserialize, Default)]
pub struct PrintOption {
    pub theme: Option<String>,
    pub number_line: Option<bool>,
    pub grid: Option<bool>,
    pub paging: Option<bool>,
    pub header: Option<bool>,
    #[deprecated]
    pub short: Option<bool>,
}

#[allow(deprecated)]

pub fn read_config_file() -> String {
    let filename = config_file_path();
    if filename.exists() {
        fs::read_to_string(&filename)
            .unwrap_or_else(|_| panic!("unable to read {}", filename.to_str().unwrap()))
    } else {
        String::new()
    }
}

#[inline]
pub fn config_file_path() -> PathBuf {
    // TODO: error
    PathBuf::from(env::var("CARGO_MANIFEST_DIR").unwrap()).join(CONFIG_FILE_NAME)
}

pub fn get_source(path: Rc<Path>) -> String {
    match fs::read_to_string(Rc::clone(&path)) {
        Ok(mut source) => match source
            .as_bytes()
            .iter()
            .rposition(|x| !x.is_ascii_whitespace())
        {
            Some(j) => {
                source.drain(j + 1..);
                source
            }
            None => source,
        },
        // TODO: error
        _ => panic!("unable to open template file '{path:?}'"),
    }
}

static CONFIG_FILE_NAME: &str = "yarte.toml";
static DEFAULT_DIR: &str = "templates";
